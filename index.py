import math
from random import expovariate
from typing import List


def exp(mat):
    return math.ceil(expovariate(1 / mat) * 60)


дней = 1000
цена_простоя_экскаватора_в_час = 5000
цена_простоя_бульдозера_в_час = 3000

доход_от_эксаватора_за_час = 5000
доход_от_бульдозера_за_час = 3000

расход_на_слесаря_6_разряда_за_час = 1000
расход_на_слесаря_3_разряда_за_час = 600
накладные_расходы_на_бригаду_в_час = 500

рабочее_время = 16 * 60

мат_ожидание_продолжительность_ремонта = {
    "слесарь 3 разряда": {
        "экскаватор": 2,  # часа
        "бульдозер": "не может"
    },
    "слесарь 6 разряда": {
        "экскаватор": 1,  # час
        "бульдозер": 2  # час
    },
    "вместе": {
        "экскаватор": 0.25,  # час
        "бульдозер": 1.5  # часа
    }

}

расходы = 0
прибыль = 0

# в первые 2 смены машины работают
# в 3 смену закрываем поломки
# простой только в первые 2 смены считается когда машина сломана
# про


class Machine:
    def __init__(self, name, мат_ожидание_работы: int) -> None:
        self.name = name
        self.мат_ожидание_работы = мат_ожидание_работы
        self.состояние = "работает"
        self.общее_время_работы = 0
        self.время_работы = 0
        self.общее_время_простоя = 0
        self.время_окончания_починки = 0
        self.время_окончания_работы = 0

    def new_day(self):
        self.set_work_time(1)
        self.время_простоя = 0
        self.время_окончания_починки = 0

    def set_work_time(self, time_now: int):
        work_time = exp(self.мат_ожидание_работы)
        work_end = time_now + exp(self.мат_ожидание_работы) - 1

        if work_end > рабочее_время + 1 - time_now:
            self.время_окончания_работы = рабочее_время
            self.время_работы = рабочее_время + 1 - time_now
            self.общее_время_работы += рабочее_время + 1 - time_now
        else:
            self.время_окончания_работы = work_time + time_now
            self.время_работы = work_time
            self.общее_время_работы += work_time

    def set_end_of_repair_time(self, time_now: int, мат_ожидание: int):
        end_of_repair_time = time_now + exp(мат_ожидание) - 1
        self.время_окончания_починки = end_of_repair_time


class Бульдозер(Machine):
    def __init__(self, name, мат_ожидание_работы: int) -> None:
        super().__init__(name, мат_ожидание_работы)


class Экскаватор(Machine):
    def __init__(self, name, мат_ожидание_работы: int) -> None:
        super().__init__(name, мат_ожидание_работы)


class Бригада:

    def __init__(self, слесарь_3_работает=True, слесарь_6_работает=True) -> None:
        self.слесарь_3_работает = слесарь_3_работает
        self.слесарь_6_работает = слесарь_6_работает
        self.рабочий_3_рязряда_занят = False if слесарь_3_работает else True
        self.рабочий_6_рязряда_занят = False if слесарь_6_работает else True
        self.время_починки_рабочим_3_общее = 0
        self.время_починки_рабочим_6_общее = 0
        self.общее_время_затраченное_на_починку = 0  # для расходов на бригаду
        self.machines_in_repair = {}

    def new_day(self):
        self.рабочий_3_рязряда_занят = False if self.слесарь_3_работает else True
        self.рабочий_6_рязряда_занят = False if self.слесарь_6_работает else True
        self.machines_in_repair.clear()

    def занять_рабочих(self, machine: Machine, time_now: int) -> bool:
        status = False

        if not self.рабочий_3_рязряда_занят and not self.рабочий_6_рязряда_занят:
            status = True
            self.рабочий_3_рязряда_занят = True
            self.рабочий_6_рязряда_занят = True
            machine.set_end_of_repair_time(time_now, мат_ожидание=мат_ожидание_продолжительность_ремонта["вместе"][machine.name])
            self.machines_in_repair["вместе"] = machine
        elif not self.рабочий_3_рязряда_занят and machine.name != "бульдозер":
            status = True
            self.рабочий_3_рязряда_занят = True
            machine.set_end_of_repair_time(time_now, мат_ожидание=мат_ожидание_продолжительность_ремонта["слесарь 3 разряда"][machine.name])
            self.machines_in_repair["слесарь 3 разряда"] = machine
        elif not self.рабочий_6_рязряда_занят:
            status = True
            self.рабочий_6_рязряда_занят = True
            machine.set_end_of_repair_time(time_now, мат_ожидание=мат_ожидание_продолжительность_ремонта["слесарь 6 разряда"][machine.name])
            self.machines_in_repair["слесарь 6 разряда"] = machine

        return status

    def освободить_рабочих(self, machine: Machine):
        need_to_drop = []

        for worker_name in self.machines_in_repair:
            if self.machines_in_repair[worker_name].name == machine.name:
                need_to_drop.append(worker_name)

        for worker_name in need_to_drop:
            if worker_name == "слесарь 6 разряда":
                self.рабочий_6_рязряда_занят = False
            elif worker_name == "слесарь 3 разряда":
                self.рабочий_3_рязряда_занят = False
            else:  # вместе
                self.рабочий_6_рязряда_занят = False
                self.рабочий_3_рязряда_занят = False

            self.machines_in_repair.pop(worker_name)

    def прибавить_к_зарплате_рабочих_если_заслужили(self,):
        for worker_name in self.machines_in_repair:
            if worker_name == "слесарь 6 разряда":
                self.время_починки_рабочим_6_общее += 1
            elif worker_name == "слесарь 3 разряда":
                self.время_починки_рабочим_3_общее += 1
            else:  # вместе
                self.время_починки_рабочим_3_общее += 1
                self.время_починки_рабочим_6_общее += 1
        if len(self.machines_in_repair.keys()) > 0:
            self.общее_время_затраченное_на_починку += 1


бульдозер = Бульдозер("бульдозер", 6)
экскаватор = Экскаватор("экскаватор", 4)
бригада = Бригада()

machines_arr: List[Machine] = [экскаватор, бульдозер]

for i in range(дней):

    бригада.new_day()
    бульдозер.new_day()
    экскаватор.new_day()

    for time_now in range(1, рабочее_время+1):
        for machine in machines_arr:

            if machine.состояние == "работает" and machine.время_окончания_работы < time_now:
                machine.состояние = "простаивает"

            if machine.состояние == "простаивает":
                ok = бригада.занять_рабочих(machine, time_now)  # и задаем время окончания починки там же
                if ok:
                    machine.состояние = "чинится"
                else:
                    machine.общее_время_простоя += 1

            if machine.состояние == "чинится" and machine.время_окончания_починки < time_now:
                machine.состояние = "работает"
                machine.set_work_time(time_now)
                бригада.освободить_рабочих(machine)

        бригада.прибавить_к_зарплате_рабочих_если_заслужили()

    if len(бригада.machines_in_repair.keys()) > 0:
        for time_now in range(дней, (дней + 8*60)+1):
            for machine in machines_arr:
                if machine.состояние == "чинится" and machine.время_окончания_починки < time_now:
                    machine.состояние = "работает"
                    machine.set_work_time(time_now)
                    бригада.освободить_рабочих(machine)

            бригада.прибавить_к_зарплате_рабочих_если_заслужили()


# print("Время работы бульдозера:", бульдозер.общее_время_работы)

# if len(бригада.machines_in_work) != 0:
#   print()

прибыль_от_бульдозера = round((бульдозер.общее_время_работы / 60) * доход_от_бульдозера_за_час)
прибыль_от_экскаватора = round((экскаватор.общее_время_работы / 60) * доход_от_эксаватора_за_час)
прибыль = прибыль_от_бульдозера + прибыль_от_экскаватора

расходы_на_простой_бульдозера = round((бульдозер.общее_время_простоя / 60) * цена_простоя_бульдозера_в_час)
расходы_на_простой_экскаватора = round((экскаватор.общее_время_простоя / 60) * цена_простоя_экскаватора_в_час)

расходы_на_слесаря_3_разряда = round((бригада.время_починки_рабочим_3_общее / 60) * расход_на_слесаря_3_разряда_за_час)
расходы_на_слесаря_6_разряда = round((бригада.время_починки_рабочим_6_общее / 60) * расход_на_слесаря_6_разряда_за_час)
общий_расход_на_бригаду = round((бригада.общее_время_затраченное_на_починку / 60) * накладные_расходы_на_бригаду_в_час)

расходы = расходы_на_простой_бульдозера + расходы_на_простой_экскаватора + расходы_на_слесаря_3_разряда + расходы_на_слесаря_6_разряда + общий_расход_на_бригаду


чистая_прибыль = прибыль - расходы
print("Расходы на простой бульдозера:", расходы_на_простой_бульдозера)
print("Расходы на простой экскаватора:", расходы_на_простой_экскаватора)

print("Расходы на слесаря 3 рязряда:", расходы_на_слесаря_3_разряда)
print("Расходы на слесаря 6 рязряда:", расходы_на_слесаря_6_разряда)

print("Общий расход на бригаду:", общий_расход_на_бригаду)

print("Расходы:", расходы)
print("Прибыль:", прибыль)


print("Чистая прибыль:", чистая_прибыль)
